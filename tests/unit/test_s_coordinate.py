import unittest
from pathlib import Path

import numpy as np

from fire.geometry.s_coordinate import get_nearest_rz_coordinates, get_nearest_boundary_coordinates

pwd = Path(__file__).parent

class TestSCoord(unittest.TestCase):

    def setUp(self):
        # TODO: Move ref vaules to csv file
        # From get_uda_mastu_wall_coords()
        self.r_wall = np.array([1.5644158 , 1.7315794 , 1.3484753 , 1.0881892 , 0.903226  ,
           0.9046392 , 0.5341571 , 0.5382938 , 0.33279714, 0.33279714,
           0.33479592, 0.30311525, 0.30511403, 0.26913595, 0.27113473,
           0.260841  , 0.260841  , 0.27113473, 0.26913595, 0.30511403,
           0.30311525, 0.33479592, 0.33279714, 0.33279714, 0.5382938 ,
           0.5341571 , 0.9046392 , 0.903226  , 1.0881892 , 1.3484753 ,
           1.7315794 , 1.5644158 , 1.3799913 , 1.3798919 , 1.1962221 ,
           1.1963165 , 1.0553741 , 1.0552835 , 0.9475025 , 0.9056864 ,
           0.899143  , 0.88338786, 0.8676812 , 0.85132235, 0.8334819 ,
           0.82606256, 0.8226777 , 0.82102275, 0.82069135, 0.82288736,
           0.827573  , 0.8391946 , 0.8552443 , 0.8775665 , 0.8994735 ,
           1.1856773 , 1.279     , 1.296     , 1.521     , 1.521     ,
           1.296     , 1.279     , 1.1856773 , 0.8994735 , 0.8775665 ,
           0.8552443 , 0.8391946 , 0.827573  , 0.82288736, 0.82069135,
           0.82102275, 0.8226777 , 0.82606256, 0.8334819 , 0.85132235,
           0.8676812 , 0.88338786, 0.899143  , 0.9056864 , 0.9475025 ,
           1.0552835 , 1.0553741 , 1.1963165 , 1.1962221 , 1.3798919 ,
           1.3799913 , 1.5644158 ])
        self.z_wall = np.array([ 1.5665352,  1.6800001,  2.0628   ,  2.0628   ,  1.8805648,
            1.8791507,  1.508443 ,  1.5043229,  1.3030896,  1.1      ,
            1.1      ,  0.8535   ,  0.8535   ,  0.571    ,  0.571    ,
            0.5012577, -0.5012577, -0.571    , -0.571    , -0.8535   ,
           -0.8535   , -1.1      , -1.1      , -1.3030896, -1.5043229,
           -1.508443 , -1.8791507, -1.8805648, -2.0628   , -2.0628   ,
           -1.6800001, -1.5665352, -1.5745829, -1.574427 , -1.5824499,
           -1.582598 , -1.5887483, -1.5886062, -1.5933142, -1.5932623,
           -1.5924847, -1.5879643, -1.5785736, -1.5653688, -1.5439421,
           -1.5264524, -1.5128683, -1.4939406, -1.4749435, -1.4435203,
           -1.4169304, -1.3849809, -1.3505412, -1.3197986, -1.2978783,
           -1.0115   , -0.84     , -0.8179   , -0.8179   ,  0.8179   ,
            0.8179   ,  0.84     ,  1.0115   ,  1.2978783,  1.3197986,
            1.3505412,  1.3849809,  1.4169304,  1.4435203,  1.4749435,
            1.4939406,  1.5128683,  1.5264524,  1.5439421,  1.5653688,
            1.5785736,  1.5879643,  1.5924847,  1.5932623,  1.5933142,
            1.5886062,  1.5887483,  1.582598 ,  1.5824499,  1.574427 ,
            1.5745829,  1.5665352])
        # From get_nearest_s_coordinates_mastu(r, z)
        self.s_wall = np.array([3.39725825, 3.19522375, 2.65364782, 2.39336173, 2.13370612,
                        2.13170697, 1.60760655, 1.60176811, 1.31415082, 1.11106123,
                        1.10906245, 0.86053494, 0.85853615, 0.57375433, 0.57175555,
                        0.50125772, 0.50125772, 0.57175555, 0.57375433, 0.85853615,
                        0.86053494, 1.10906245, 1.11106123, 1.31415082, 1.60176811,
                        1.60760655, 2.13170697, 2.13370612, 2.39336173, 2.65364782,
                        3.19522375, 3.39725825, 3.58185827, 3.5820432 , 3.76588815,
                        3.76606374, 3.90714021, 3.90730873, 4.01519256, 4.05700871,
                        4.06359815, 4.07998893, 4.09828878, 4.11931208, 4.14719369,
                        4.16619199, 4.1801915 , 4.1991914 , 4.21819137, 4.24969122,
                        4.27669078, 4.31068833, 4.34868418, 4.38667619, 4.41766677,
                        4.82254345, 5.01779046, 5.04567249, 5.27067251, 5.27067251,
                        5.04567249, 5.01779046, 4.82254345, 4.41766677, 4.38667619,
                        4.34868418, 4.31068833, 4.27669078, 4.24969122, 4.21819137,
                        4.1991914 , 4.1801915 , 4.16619199, 4.14719369, 4.11931208,
                        4.09828878, 4.07998893, 4.06359815, 4.05700871, 4.01519256,
                        3.90730873, 3.90714021, 3.76606375, 3.76588815, 3.5820432 ,
                        3.58185827, 3.39725825])

    def test_get_nearest_boundary_coordinates(self):
        point = (1.1, -1.8)

        closest_coords, closest_dist, closest_index = get_nearest_boundary_coordinates(*point, self.r_wall, self.z_wall)
        expected_value = np.array([[ 0.9046392, -1.8791507]])
        self.assertTrue(np.all(np.isclose(closest_coords, expected_value)))

    def test_get_nearest_rz_coordinates(self):
        point = (1.1, -1.8)
        s_close = 1.6
        r, z = get_nearest_rz_coordinates(s_close, self.r_wall, self.s_wall, self.s_wall)
        r_expected, z_expected = (np.array([0.53703052]), np.array([1.6]))
        self.assertTrue(np.all(np.isclose(r, r_expected)))
        self.assertTrue(np.all(np.isclose(z, z_expected)))


def suite():
    suite = unittest.TestSuite()
    loader = unittest.TestLoader()
    # suite.addTests(loader.loadTestsFromTestCase(TestIoIpx))
    suite.addTest(TestSCoord.test_get_calcam_calib_path_fn)
    return suite

if __name__ == '__main__':

    runner = unittest.TextTestRunner(failfast=True)
    unittest.main()
    # runner.run(suite())